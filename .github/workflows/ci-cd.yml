name: Quality Control and Release

on:
  push:
    branches: [main]

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.changes.outputs.should-release }}
      
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for version bumping

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test -- --ci --watchAll=false --maxWorkers=2 --coverage
        
      - name: Check for changes requiring release
        id: changes
        run: |
          # Check if there are commits since last tag that should trigger a release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
          else
            # Check for conventional commits that should trigger release
            COMMITS=$(git log $LAST_TAG..HEAD --oneline)
            if echo "$COMMITS" | grep -E "^[a-f0-9]+ (feat|fix|perf|revert)" > /dev/null; then
              echo "should-release=true" >> $GITHUB_OUTPUT
            else
              echo "should-release=false" >> $GITHUB_OUTPUT
            fi
          fi

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: quality-checks
    if: needs.quality-checks.outputs.should-release == 'true'
    permissions:
      contents: write  # Required to push commits, tags, and create releases
    outputs:
      version: ${{ steps.version.outputs.new-version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Determine version bump
        id: version
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: $LAST_TAG"

          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Analyze commits for version bump type
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log $LAST_TAG..HEAD --oneline)
          else
            COMMITS=$(git log --oneline)
          fi
          echo "Commits since last tag:"
          echo "$COMMITS"
          
          BUMP_TYPE="patch"
          if echo "$COMMITS" | grep -E "(BREAKING CHANGE|!:)" > /dev/null; then
            BUMP_TYPE="major"
          elif echo "$COMMITS" | grep -E "^[a-f0-9]+ feat" > /dev/null; then
            BUMP_TYPE="minor"
          fi
          
          echo "bump-type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          
          # Calculate new version
          IFS='.' read -ra VERSION_PARTS <<< "${CURRENT_VERSION}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Update package.json version
        run: |
          npm version ${{ steps.version.outputs.new-version }} --no-git-tag-version
          
      - name: Generate changelog
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          NEW_VERSION="v${{ steps.version.outputs.new-version }}"

          echo "# 🚀 Release $NEW_VERSION" > CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md

          if [ -n "$LAST_TAG" ]; then
            echo "📝 Changes since $LAST_TAG" >> CHANGELOG_TEMP.md
          else
            echo "📝 Initial Release" >> CHANGELOG_TEMP.md
          fi
          echo "" >> CHANGELOG_TEMP.md

          # Get commits since last tag
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%h %s" --reverse)
          else
            COMMITS=$(git log --pretty=format:"%h %s" --reverse)
          fi
          
          # Categorize commits
          echo "## ✨ Features" >> CHANGELOG_TEMP.md
          echo "$COMMITS" | grep "^[a-f0-9]* feat" | sed 's/^[a-f0-9]* feat[(:]*[^:)]*/- /' || echo "- No new features" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          echo "## 🐛 Bug Fixes" >> CHANGELOG_TEMP.md
          echo "$COMMITS" | grep "^[a-f0-9]* fix" | sed 's/^[a-f0-9]* fix[(:]*[^:)]*/- /' || echo "- No bug fixes" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          echo "## 🏗️ Technical Improvements" >> CHANGELOG_TEMP.md
          echo "$COMMITS" | grep -E "^[a-f0-9]* (chore|ci|docs|style|refactor|perf|test)" | sed 's/^[a-f0-9]* [^:]*[(:]*[^:)]*/- /' || echo "- No technical improvements" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          echo "## 📱 Download" >> CHANGELOG_TEMP.md
          echo "- 🤖 **Android APK**: Download the APK file below to install manually on your device" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          echo "## 🛠️ Technical Details" >> CHANGELOG_TEMP.md
          echo "- **React Native**: 0.79.5" >> CHANGELOG_TEMP.md
          echo "- **Expo SDK**: 53" >> CHANGELOG_TEMP.md
          echo "- **Test Coverage**: 91.86%" >> CHANGELOG_TEMP.md
          echo "- **Platforms**: iOS, Android, Web" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          echo "---" >> CHANGELOG_TEMP.md
          echo "*Built with ❤️ for the Trading Card Game community*" >> CHANGELOG_TEMP.md
          
          # Output for GitHub release
          echo 'changelog<<EOF' >> $GITHUB_OUTPUT
          cat CHANGELOG_TEMP.md >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: bump version to v${{ steps.version.outputs.new-version }}"
          git tag "v${{ steps.version.outputs.new-version }}"
          git push origin main --tags

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.version.outputs.new-version }}"
          release_name: "🚀 Ledger Mobile v${{ steps.version.outputs.new-version }}"
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: write  # Required to upload release assets

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: "v${{ needs.release.outputs.version }}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: npm ci

      - name: Build Android APK
        id: build
        run: |
          # Start the build and capture the output
          BUILD_OUTPUT=$(eas build --platform android --profile preview-apk --non-interactive --no-wait 2>&1)
          echo "$BUILD_OUTPUT"

          # Extract build ID from output
          BUILD_ID=$(echo "$BUILD_OUTPUT" | grep -oP 'Build ID:\s*\K[a-f0-9-]+' || echo "$BUILD_OUTPUT" | grep -oP 'https://expo.dev/accounts/[^/]+/projects/[^/]+/builds/\K[a-f0-9-]+')

          if [ -z "$BUILD_ID" ]; then
            echo "Error: Could not extract build ID from output"
            echo "Output was: $BUILD_OUTPUT"
            exit 1
          fi

          echo "build-id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "Successfully started build: $BUILD_ID"

      - name: Download APK
        run: |
          BUILD_ID="${{ steps.build.outputs.build-id }}"
          echo "Waiting for build $BUILD_ID to complete..."
          echo "Build URL: https://expo.dev/accounts/$(eas whoami)/projects/ledger-mobile/builds/$BUILD_ID"

          # Set timeout (60 minutes)
          TIMEOUT=3600
          ELAPSED=0
          INTERVAL=30

          while [ $ELAPSED -lt $TIMEOUT ]; do
            # Get build status - capture output for debugging
            BUILD_INFO=$(eas build:view $BUILD_ID --json 2>&1)

            # Check if output is valid JSON
            if ! echo "$BUILD_INFO" | jq -e . >/dev/null 2>&1; then
              echo "Warning: Invalid JSON response from EAS:"
              echo "$BUILD_INFO"
              echo "Retrying in $INTERVAL seconds..."
              sleep $INTERVAL
              ELAPSED=$((ELAPSED + INTERVAL))
              continue
            fi

            STATUS=$(echo "$BUILD_INFO" | jq -r '.status')
            echo "Build status: $STATUS (elapsed: ${ELAPSED}s)"

            if [ "$STATUS" = "FINISHED" ]; then
              echo "✅ Build completed successfully!"

              # Extract APK URL
              APK_URL=$(echo "$BUILD_INFO" | jq -r '.artifacts.buildUrl')

              if [ -z "$APK_URL" ] || [ "$APK_URL" = "null" ]; then
                echo "Error: Could not find APK URL in build info"
                echo "Build info: $BUILD_INFO"
                exit 1
              fi

              echo "Downloading APK from: $APK_URL"
              curl -L -o ledger-mobile.apk "$APK_URL"

              # Verify download
              if [ ! -f ledger-mobile.apk ]; then
                echo "Error: APK file was not downloaded"
                exit 1
              fi

              APK_SIZE=$(ls -lh ledger-mobile.apk | awk '{print $5}')
              echo "✅ APK downloaded successfully (size: $APK_SIZE)"
              exit 0

            elif [ "$STATUS" = "ERRORED" ] || [ "$STATUS" = "CANCELED" ]; then
              echo "❌ Build failed with status: $STATUS"
              echo "Build info: $BUILD_INFO"
              exit 1
            elif [ "$STATUS" = "IN_PROGRESS" ] || [ "$STATUS" = "PENDING" ] || [ "$STATUS" = "IN_QUEUE" ]; then
              echo "⏳ Build is $STATUS, waiting..."
            else
              echo "Unknown status: $STATUS"
            fi

            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          echo "❌ Build timed out after ${TIMEOUT}s"
          exit 1

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./ledger-mobile.apk
          asset_name: ledger-mobile-v${{ needs.release.outputs.version }}.apk
          asset_content_type: application/vnd.android.package-archive

  # Future: App Store Deployment (uncomment when ready)
  # app-store-deploy:
  #   name: Deploy to App Stores
  #   runs-on: ubuntu-latest
  #   needs: [quality-checks, release]
  #   if: needs.quality-checks.outputs.should-release == 'true'
  #   
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4
  #       
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "22"
  #         cache: "npm"
  #         
  #     - name: Setup Expo
  #       uses: expo/expo-github-action@v8
  #       with:
  #         expo-version: latest
  #         token: ${{ secrets.EXPO_TOKEN }}
  #         
  #     - name: Install dependencies
  #       run: npm ci
  #       
  #     - name: Build and Submit to App Stores
  #       run: |
  #         # Build for iOS App Store
  #         eas build --platform ios --auto-submit --profile production
  #         
  #         # Build for Google Play Store  
  #         eas build --platform android --auto-submit --profile production

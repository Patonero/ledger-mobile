name: EAS Build and Deploy

on:
  push:
    branches: [main]

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test -- --ci --watchAll=false --maxWorkers=2
        continue-on-error: true

  build:
    name: EAS Build
    needs: quality-checks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Bump version
        id: version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Determine version bump type from commit messages
          COMMIT_MESSAGES=$(git log --format=%B -n 10 --since="1 day ago")
          
          if echo "$COMMIT_MESSAGES" | grep -q -i "BREAKING CHANGE\|^feat!"; then
            BUMP_TYPE="major"
          elif echo "$COMMIT_MESSAGES" | grep -q -i "^feat\|^feature"; then
            BUMP_TYPE="minor"
          else
            BUMP_TYPE="patch"
          fi
          
          echo "Bump type: $BUMP_TYPE"
          
          # Bump version using npm
          NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version)
          echo "New version: $NEW_VERSION"
          
          # Update app.json version and build numbers (remove the 'v' prefix)
          VERSION_NUMBER=${NEW_VERSION#v}
          node -p "
            const fs = require('fs');
            const appJson = JSON.parse(fs.readFileSync('app.json', 'utf8'));
            appJson.expo.version = '$VERSION_NUMBER';
            
            // Increment build numbers
            appJson.expo.android.versionCode = (appJson.expo.android.versionCode || 1) + 1;
            appJson.expo.ios.buildNumber = String((parseInt(appJson.expo.ios.buildNumber || '1') + 1));
            
            fs.writeFileSync('app.json', JSON.stringify(appJson, null, 2) + '\n');
            'Updated app.json version to $VERSION_NUMBER with new build numbers'
          "
          
          # Set output for later steps
          echo "version=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add package.json app.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new-version }} [skip ci]" || exit 0
          git push || exit 0

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build for Android
        run: eas build --platform android --profile preview --non-interactive --no-wait

      # - name: Build for iOS
      #   run: eas build --platform ios --profile preview --non-interactive --no-wait

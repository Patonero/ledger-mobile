name: Quality Control and Release

on:
  push:
    branches: [main]

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test -- --ci --watchAll=false --maxWorkers=2
        continue-on-error: true

  release:
    name: Version and Release  
    needs: quality-checks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Bump version
        id: version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Determine version bump type from commit messages
          COMMIT_MESSAGES=$(git log --format=%B -n 10 --since="1 day ago")
          
          if echo "$COMMIT_MESSAGES" | grep -q -i "BREAKING CHANGE\|^feat!"; then
            BUMP_TYPE="major"
          elif echo "$COMMIT_MESSAGES" | grep -q -i "^feat\|^feature"; then
            BUMP_TYPE="minor"
          else
            BUMP_TYPE="patch"
          fi
          
          echo "Bump type: $BUMP_TYPE"
          
          # Bump version using npm
          NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version)
          echo "New version: $NEW_VERSION"
          
          # Update app.json version and build numbers (remove the 'v' prefix)
          VERSION_NUMBER=${NEW_VERSION#v}
          node -p "
            const fs = require('fs');
            const appJson = JSON.parse(fs.readFileSync('app.json', 'utf8'));
            appJson.expo.version = '$VERSION_NUMBER';
            
            // Increment build numbers
            appJson.expo.android.versionCode = (appJson.expo.android.versionCode || 1) + 1;
            appJson.expo.ios.buildNumber = String((parseInt(appJson.expo.ios.buildNumber || '1') + 1));
            
            fs.writeFileSync('app.json', JSON.stringify(appJson, null, 2) + '\n');
            'Updated app.json version to $VERSION_NUMBER with new build numbers'
          "
          
          # Set output for later steps
          echo "version=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag (or all commits if no tags)
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Categorize commits
          FEATURES=$(echo "$COMMITS" | grep -i "^- feat\|^- feature" || true)
          FIXES=$(echo "$COMMITS" | grep -i "^- fix\|^- bug" || true)
          OTHERS=$(echo "$COMMITS" | grep -v -i "^- feat\|^- feature\|^- fix\|^- bug\|^- chore: bump version" || true)
          
          # Build changelog
          CHANGELOG="## What's Changed"$'\n'
          
          if [ ! -z "$FEATURES" ]; then
            CHANGELOG="$CHANGELOG"$'\n'"### ✨ New Features"$'\n'"$FEATURES"$'\n'
          fi
          
          if [ ! -z "$FIXES" ]; then
            CHANGELOG="$CHANGELOG"$'\n'"### 🐛 Bug Fixes"$'\n'"$FIXES"$'\n'
          fi
          
          if [ ! -z "$OTHERS" ]; then
            CHANGELOG="$CHANGELOG"$'\n'"### 🔧 Other Changes"$'\n'"$OTHERS"$'\n'
          fi
          
          # Add build info
          CHANGELOG="$CHANGELOG"$'\n'"### 📱 Build Information"$'\n'
          CHANGELOG="$CHANGELOG""- **Version**: ${{ steps.version.outputs.version }}"$'\n'
          CHANGELOG="$CHANGELOG""- **Android Version Code**: $(($(node -p "require('./app.json').expo.android.versionCode") + 1))"$'\n'
          CHANGELOG="$CHANGELOG""- **iOS Build Number**: $(($(node -p "require('./app.json').expo.ios.buildNumber") + 1))"$'\n'
          CHANGELOG="$CHANGELOG""- **Built with**: Expo SDK 53, React Native 0.79.5"$'\n'
          
          # Save changelog for release
          echo "$CHANGELOG" > CHANGELOG.md
          
          # Set output (escape newlines for GitHub Actions)
          {
            echo 'changelog<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add package.json app.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new-version }} [skip ci]" || exit 0
          git push || exit 0

      - name: Create Git Tag
        run: |
          git tag ${{ steps.version.outputs.new-version }}
          git push origin ${{ steps.version.outputs.new-version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new-version }}
          name: "Release ${{ steps.version.outputs.new-version }}"
          body: |
            ${{ steps.changelog.outputs.changelog }}
            
            ### 🚀 Downloads & Installation
            
            **Mobile App:**
            - 📱 Build locally: `npx eas build --platform android --profile preview-apk --local`
            - 🌐 Build on EAS: `npx eas build --platform android --profile preview-apk`
            - 📱 Test with Expo Go: `npm start` and scan QR code
            
            **Development:**
            ```bash
            git checkout ${{ steps.version.outputs.new-version }}
            npm install
            npm start
            ```
            
            ### 🛠️ Technical Details
            
            - **Expo SDK**: 53
            - **React Native**: 0.79.5
            - **React**: 19.0.0
            - **Node.js**: ≥22.0.0
            
            ### 📋 Testing
            
            This release includes **${{ env.TEST_COUNT || '40+' }} automated tests** covering:
            - Life tracking functionality
            - Settings and persistence
            - Haptic feedback
            - Error handling
            - Cross-platform compatibility
            
            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ env.PREVIOUS_TAG || 'v1.0.0' }}...${{ steps.version.outputs.new-version }}
          draft: false
          prerelease: false
          generate_release_notes: true
